openapi: '3.0.0'
info:
  title: 'User API'
  version: '1.0.0'
paths:
  /register:
    post:
      summary: 'Registers a new user'
      requestBody:
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                username:
                  type: 'string'
                password:
                  type: 'string'
              required:
                - username
                - password
      responses:
        '200':
          description: 'User registered successfully'
        '500':
          description: 'Error registering user'
  /login:
    post:
      summary: 'Logs in a user and generates access and refresh tokens'
      requestBody:
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                username:
                  type: 'string'
                password:
                  type: 'string'
              required:
                - username
                - password
      responses:
        '200':
          description: 'Access and refresh tokens generated'
        '403':
          description: 'Already logged in'
        '401':
          description: 'User not found or Invalid password'
        '500':
          description: 'An error occurred while logging in'
  /refresh_token:
    post:
      summary: 'Refreshes the access token using the refresh token'
      requestBody:
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                refreshToken:
                  type: 'string'
              required:
                - refreshToken
      responses:
        '200':
          description: 'Access token refreshed'
        '401':
          description: 'Invalid refresh token'
        '500':
          description: 'Error refreshing token'
  /logout:
    post:
      summary: 'Logs out the user by blacklisting the access token'
      responses:
        '200':
          description: 'Logged out successfully'
        '500':
          description: 'Error logging out'
  /users:
    post:
      summary: 'Creates a new user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 'User created successfully'
        '400':
          description: 'Invalid user data'
    get:
      summary: 'Gets all users'
      responses:
        '200':
          description: 'Successfully retrieved users'
  /users/{userId}:
    get:
      summary: 'Gets a user by ID'
      parameters:
        - name: 'userId'
          in: 'path'
          required: true
          schema:
            type: 'integer'
      responses:
        '200':
          description: 'Successfully retrieved user'
        '404':
          description: 'User not found'
    put:
      summary: 'Updates a user by ID'
      parameters:
        - name: 'userId'
          in: 'path'
          required: true
          schema:
            type: 'integer'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 'User updated successfully'
        '400':
          description: 'Invalid user data'
        '404':
          description: 'User not found'
    delete:
      summary: 'Deletes a user by ID'
      parameters:
        - name: 'userId'
          in: 'path'
          required: true
          schema:
            type: 'integer'
      responses:
        '200':
          description: 'User deleted successfully'
        '404':
          description: 'User not found'
components:
  schemas:
    User:
      type: 'object'
      properties:
        id:
          type: 'integer'
        username:
          type: 'string'
        password:
          type: 'string'
